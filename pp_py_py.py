# -*- coding: utf-8 -*-
"""pp_py.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13l3xIiSQGe5y65KfIJTxZBVunOfXR6Wl
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import gspread
# import pandas as pd
# from google.colab import auth
# from google.auth import default
# 
# # Autenticaci√≥n
# auth.authenticate_user()
# creds, _ = default()
# gc = gspread.authorize(creds)
# 
# # Carga de datos desde Google Sheets
# sheet_url = "https://docs.google.com/spreadsheets/d/1DXNDdLWuNEVfykJeO9NkNzn6JFBkfrc0u4YTLNh3xP8/edit"
# worksheet_name = "INVENTARIO-VENTASXMES"
# st.title("Sistema de Inventario")
# st.write("Cargando datos...")
# 
# spreadsheet = gc.open_by_url(sheet_url)
# worksheet = spreadsheet.worksheet(worksheet_name)
# data = worksheet.get_all_records()
# df = pd.DataFrame(data)
# 
# st.write("Datos cargados:")
# st.dataframe(df)
# 
# # Agregar an√°lisis o gr√°ficos
# st.write("Resumen de productos a pedir:")
# df['Pedido recomendado'] = (df['Inventario minimo'] + df['inventario de seguridad'] - df['Existencia']).clip(lower=0)
# resumen = df[df['Pedido recomendado'] > 0]
# st.dataframe(resumen)
#

# Instalaci√≥n de las bibliotecas necesarias
!pip install gspread pandas gspread-dataframe openpyxl matplotlib

import gspread
from google.colab import auth
from google.auth import default
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# ==========================
# üîê AUTENTICACI√ìN CON GOOGLE
# ==========================
print("\nüîê Autenticando con Google...")
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)
print("‚úÖ Autenticaci√≥n exitosa.")

# ==========================
# üìÇ CONECTAR A GOOGLE SHEETS
# ==========================
sheet_url = "https://docs.google.com/spreadsheets/d/1DXNDdLWuNEVfykJeO9NkNzn6JFBkfrc0u4YTLNh3xP8/edit"
print(f"\nüìÇ Conectando a la hoja de c√°lculo:\n{sheet_url}")
spreadsheet = gc.open_by_url(sheet_url)

# ==========================
# üìë SELECCIONAR LA HOJA PRINCIPAL
# ==========================
worksheet_name = "INVENTARIO-VENTASXMES"
print(f"üìë Seleccionando la hoja: '{worksheet_name}'")
worksheet = spreadsheet.worksheet(worksheet_name)

# ==========================
# üìä CARGAR LOS DATOS EN UN DATAFRAME
# ==========================
print("\nüìä Cargando datos...")
data = worksheet.get_all_records()
df = pd.DataFrame(data)

# Verificar las columnas disponibles
print("\nüìù Encabezados disponibles en la hoja:")
print(df.columns.tolist())

# ==========================
# üîç VERIFICACI√ìN DE COLUMNAS
# ==========================
necesarias = ['Nombre', 'Existencia', 'Inventario minimo', 'inventario de seguridad']  # Nombres exactos del archivo
opcional = 'Vendido'  # Columna opcional para el gr√°fico de ventas
disponibles = df.columns.tolist()

faltantes = [col for col in necesarias if col not in disponibles]
if faltantes:
    print(f"\n‚ö†Ô∏è Error: Las siguientes columnas necesarias no est√°n en la hoja: {faltantes}")
    print(f"üìå Columnas disponibles: {disponibles}")
    raise KeyError("Columnas faltantes en el archivo")

# ==========================
# üîß LIMPIEZA DE DATOS
# ==========================
print("\nüîß Limpiando datos...")
columnas_numericas = ['Existencia', 'Inventario minimo', 'inventario de seguridad']

for columna in columnas_numericas:
    df[columna] = (
        df[columna]
        .replace({',': '', '\.': ''}, regex=True)  # Eliminar separadores de miles
        .astype(str)  # Asegurarse de que todo sea texto antes de convertir
        .str.replace(' ', '')  # Eliminar espacios
    )
    df[columna] = pd.to_numeric(df[columna], errors='coerce').fillna(0)  # Convertir a n√∫mero

# Calcular el pedido recomendado
df['Pedido recomendado'] = (df['Inventario minimo'] + df['inventario de seguridad'] - df['Existencia']).clip(lower=0)

if opcional in disponibles:
    df[opcional] = pd.to_numeric(df[opcional], errors='coerce').fillna(0)

print("‚úÖ Datos preparados correctamente.")

# ==========================
# üìÑ FUNCI√ìN: RESUMEN DE PRODUCTOS A PEDIR
# ==========================
def generar_resumen():
    print("\nüîé Generando resumen de productos a pedir...")
    try:
        productos_a_pedir = df[df['Pedido recomendado'] > 0]

        if not productos_a_pedir.empty:
            print("\nüìã Resumen de productos a pedir:")
            print(productos_a_pedir[['Nombre', 'Existencia', 'Inventario minimo', 'inventario de seguridad', 'Pedido recomendado']])

            file_name = "Resumen_Productos_Pedir.xlsx"
            productos_a_pedir.to_excel(file_name, index=False, engine='openpyxl')
            print(f"\n‚úÖ Resumen guardado como: {file_name}")
            files.download(file_name)
        else:
            print("\n‚ö†Ô∏è No hay productos que necesiten ser pedidos.")
    except Exception as e:
        print(f"‚ùå Error al generar el resumen: {e}")

# ==========================
# üìà FUNCI√ìN: GR√ÅFICO DE PRODUCTOS M√ÅS VENDIDOS
# ==========================
def generar_grafico_ventas():
    if opcional not in disponibles:
        print("\n‚ö†Ô∏è La columna 'Vendido' no est√° disponible. No se puede generar el gr√°fico.")
        return

    print("\nüìä Generando gr√°fico de productos m√°s vendidos...")
    try:
        productos_mas_vendidos = df.sort_values(by=opcional, ascending=False).head(10)

        plt.figure(figsize=(10, 6))
        plt.barh(productos_mas_vendidos['Nombre'], productos_mas_vendidos[opcional], color='green')
        plt.xlabel("Cantidad Vendida")
        plt.ylabel("Producto")
        plt.title("Top 10 Productos M√°s Vendidos")
        plt.gca().invert_yaxis()
        plt.tight_layout()

        grafico_file = "Grafico_Top10_Ventas.png"
        plt.savefig(grafico_file)
        plt.show()
        print(f"\n‚úÖ Gr√°fico guardado como: {grafico_file}")
        files.download(grafico_file)
    except Exception as e:
        print(f"‚ùå Error al generar el gr√°fico: {e}")

# ==========================
# üìå MEN√ö PRINCIPAL
# ==========================
def menu():
    while True:
        print("\nüìå MEN√ö PRINCIPAL:")
        print("1Ô∏è‚É£ Generar resumen de productos a pedir")
        print("2Ô∏è‚É£ Generar gr√°fico de productos m√°s vendidos")
        print("3Ô∏è‚É£ Salir")
        opcion = input("üëâ Selecciona una opci√≥n (1, 2 o 3): ").strip()

        if opcion == "1":
            generar_resumen()
        elif opcion == "2":
            generar_grafico_ventas()
        elif opcion == "3":
            print("\nüëã Programa terminado. ¬°Hasta luego!")
            break
        else:
            print("‚ö†Ô∏è Opci√≥n no v√°lida. Intenta nuevamente.")

# ==========================
# üöÄ EJECUTAR EL MEN√ö
# ==========================
menu()

columnas_numericas = ['Existencia', 'Inventario minimo', 'inventario de seguridad']

for columna in columnas_numericas:
    df[columna] = (
        df[columna]
        .replace({',': '', '\.': ''}, regex=True)  # Eliminar separadores de miles
        .astype(str)  # Asegurarse de que todo sea texto antes de convertir
        .str.replace(' ', '')  # Eliminar espacios
    )
    df[columna] = pd.to_numeric(df[columna], errors='coerce').fillna(0)  # Convertir a n√∫mero

!pip install streamlit pyngrok

import streamlit as st

st.title("Mi Aplicaci√≥n de Inventario")
st.write("Bienvenido a la aplicaci√≥n.")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# st.title("Mi Aplicaci√≥n de Inventario")
# st.write("¬°Hola! Este es un ejemplo b√°sico de Streamlit.")
#

!pip install --upgrade pyngrok

!streamlit run app.py & ./cloudflared tunnel --url http://localhost:8501

with open("requirements.txt", "w") as f:
    f.write("""streamlit
gspread
pandas
matplotlib
openpyxl
google-auth
google-auth-oauthlib
google-auth-httplib2
""")

from google.colab import files
files.download("requirements.txt")

!pip install streamlit pyngrok gspread pandas gspread-dataframe openpyxl matplotlib
!wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -O cloudflared
!chmod +x cloudflared